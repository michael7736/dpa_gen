openapi: 3.0.3
info:
  title: DPA Next API
  description: |
    DPA Next 智能研究助手 API
    
    提供项目生命周期管理、智能文档处理、认知分析等功能的RESTful API接口。
  version: 1.0.0
  contact:
    name: DPA开发团队
    email: support@dpa.ai
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8001/api/v1
    description: 本地开发服务器
  - url: https://api.dpa.ai/v1
    description: 生产服务器

security:
  - bearerAuth: []

tags:
  - name: auth
    description: 用户认证
  - name: projects
    description: 项目管理
  - name: tasks
    description: 任务管理
  - name: documents
    description: 文档处理
  - name: cognitive
    description: 认知分析
  - name: memories
    description: 记忆系统
  - name: deliverables
    description: 可交付成果

paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: 用户注册
      operationId: registerUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: 注册成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/login:
    post:
      tags:
        - auth
      summary: 用户登录
      operationId: loginUser
      security: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /projects:
    get:
      tags:
        - projects
      summary: 获取项目列表
      operationId: listProjects
      parameters:
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProjectStatus'
        - name: project_type
          in: query
          schema:
            $ref: '#/components/schemas/ProjectType'
      responses:
        '200':
          description: 项目列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectResponse'
    
    post:
      tags:
        - projects
      summary: 创建项目
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
      responses:
        '201':
          description: 项目创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /projects/{project_id}:
    get:
      tags:
        - projects
      summary: 获取项目详情
      operationId: getProject
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        '200':
          description: 项目详情
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      tags:
        - projects
      summary: 更新项目
      operationId: updateProject
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
      responses:
        '200':
          description: 项目更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      tags:
        - projects
      summary: 删除项目
      operationId: deleteProject
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        '200':
          description: 项目删除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Project deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /projects/{project_id}/execute:
    post:
      tags:
        - projects
      summary: 执行项目
      operationId: executeProject
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectExecutionRequest'
      responses:
        '200':
          description: 项目执行已启动
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectExecutionResponse'

  /projects/{project_id}/tasks:
    get:
      tags:
        - tasks
      summary: 获取项目任务列表
      operationId: listTasks
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        '200':
          description: 任务列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskResponse'
    
    post:
      tags:
        - tasks
      summary: 创建任务
      operationId: createTask
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateRequest'
      responses:
        '201':
          description: 任务创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'

  /projects/{project_id}/tasks/{task_id}:
    put:
      tags:
        - tasks
      summary: 更新任务
      operationId: updateTask
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/taskId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateRequest'
      responses:
        '200':
          description: 任务更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'

  /documents/upload:
    post:
      tags:
        - documents
      summary: 上传文档
      operationId: uploadDocument
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - project_id
              properties:
                file:
                  type: string
                  format: binary
                project_id:
                  type: string
                  format: uuid
                title:
                  type: string
                description:
                  type: string
                tags:
                  type: string
                  description: 逗号分隔的标签
      responses:
        '201':
          description: 文档上传成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'

  /cognitive/analyze:
    post:
      tags:
        - cognitive
      summary: 文档深度分析
      operationId: analyzeDocument
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisRequest'
      responses:
        '200':
          description: 分析结果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisResponse'

  /cognitive/chat:
    post:
      tags:
        - cognitive
      summary: 认知对话
      operationId: cognitiveChat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CognitiveChatRequest'
      responses:
        '200':
          description: 对话响应
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CognitiveChatResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    projectId:
      name: project_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    
    taskId:
      name: task_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    
    skip:
      name: skip
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
    
    limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  schemas:
    # Enums
    ProjectType:
      type: string
      enum:
        - research
        - analysis
        - report
        - documentation
        - custom
    
    ProjectStatus:
      type: string
      enum:
        - draft
        - planning
        - executing
        - paused
        - completed
        - archived
        - cancelled
    
    TaskType:
      type: string
      enum:
        - data_collection
        - data_indexing
        - deep_analysis
        - verification
        - report_writing
        - custom
    
    TaskStatus:
      type: string
      enum:
        - pending
        - ready
        - in_progress
        - blocked
        - completed
        - failed
        - cancelled

    # Auth schemas
    UserRegister:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
        full_name:
          type: string

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        full_name:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          default: bearer
        expires_in:
          type: integer

    # Project schemas
    ProjectCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        type:
          $ref: '#/components/schemas/ProjectType'
        config:
          type: object
        objectives:
          type: array
          items:
            type: string
        constraints:
          type: array
          items:
            type: string

    ProjectUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/ProjectStatus'
        config:
          type: object
        objectives:
          type: array
          items:
            type: string
        constraints:
          type: array
          items:
            type: string
        quality_gates:
          type: object
          additionalProperties:
            type: number

    ProjectResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/ProjectType'
        status:
          $ref: '#/components/schemas/ProjectStatus'
        config:
          type: object
        objectives:
          type: array
          items:
            type: string
        constraints:
          type: array
          items:
            type: string
        quality_gates:
          type: object
        progress:
          type: number
          minimum: 0
          maximum: 1
        quality_score:
          type: number
        success_rate:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        user_id:
          type: string
          format: uuid

    ProjectExecutionRequest:
      type: object
      properties:
        initial_context:
          type: object
        user_preferences:
          type: object
        quality_gates:
          type: object

    ProjectExecutionResponse:
      type: object
      properties:
        project_id:
          type: string
          format: uuid
        execution_id:
          type: string
        status:
          type: string
        message:
          type: string

    # Task schemas
    TaskCreateRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/TaskType'
        priority:
          type: integer
          minimum: 0
          maximum: 10
        dependencies:
          type: array
          items:
            type: string
            format: uuid
        estimated_time:
          type: integer
          description: 预计时间（分钟）
        plan:
          type: object

    TaskUpdateRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/TaskStatus'
        priority:
          type: integer
        result:
          type: object
        quality_score:
          type: number

    TaskResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        title:
          type: string
        type:
          $ref: '#/components/schemas/TaskType'
        status:
          $ref: '#/components/schemas/TaskStatus'
        priority:
          type: integer
        order:
          type: integer
        dependencies:
          type: array
          items:
            type: string
            format: uuid
        estimated_time:
          type: integer
        actual_time:
          type: integer
        created_at:
          type: string
          format: date-time

    # Document schemas
    DocumentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        title:
          type: string
        file_type:
          type: string
        file_size:
          type: integer
        status:
          type: string
        created_at:
          type: string
          format: date-time

    # Cognitive schemas
    AnalysisRequest:
      type: object
      required:
        - document_id
      properties:
        document_id:
          type: string
          format: uuid
        analysis_type:
          type: string
          enum: [deep, quick, comparative]
        options:
          type: object

    AnalysisResponse:
      type: object
      properties:
        analysis_id:
          type: string
          format: uuid
        document_id:
          type: string
          format: uuid
        results:
          type: object
        confidence:
          type: number
        processing_time:
          type: number

    CognitiveChatRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
        project_id:
          type: string
          format: uuid
        context:
          type: object

    CognitiveChatResponse:
      type: object
      properties:
        response:
          type: string
        sources:
          type: array
          items:
            type: object
        confidence:
          type: number
        strategies_used:
          type: array
          items:
            type: string

    # Error schemas
    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
        status_code:
          type: integer
        error_code:
          type: string

  responses:
    BadRequest:
      description: 请求参数错误
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Unauthorized:
      description: 未授权
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    NotFound:
      description: 资源不存在
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    InternalError:
      description: 服务器内部错误
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'