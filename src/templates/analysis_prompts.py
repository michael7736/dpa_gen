"""
文档分析提示词模板库
包含六个阶段的标准化提示词
"""

from typing import Dict, List
from enum import Enum


class PromptCategory(str, Enum):
    """提示词类别"""
    SUMMARIZATION = "summarization"
    QUESTIONING = "questioning"
    ANALYSIS = "analysis"
    CRITIQUE = "critique"
    SYNTHESIS = "synthesis"
    OUTPUT = "output"


class AnalysisPrompts:
    """文档分析提示词集合"""
    
    # 阶段1：准备与预处理
    PREPARATION_PROMPTS = {
        "intelligent_chunking": """请将这份文档按以下规则进行智能分块：
1. 保持语义完整性（每块包含完整的论述单元）
2. 标注每块的主题和在文档中的位置
3. 识别并标记关键概念、人物、数据
4. 生成每块的元数据标签

要求：
- 每块长度在500-1500字之间
- 优先在章节、段落边界分割
- 保留重要的上下文信息

输出JSON格式：
[{
    "chunk_id": "唯一标识",
    "content": "块内容",
    "topic": "主题概述",
    "position": {"chapter": "章节", "section": "小节", "paragraph": "段落号"},
    "key_concepts": ["概念1", "概念2"],
    "entities": {"people": [], "organizations": [], "technologies": []},
    "metadata_tags": ["标签1", "标签2"]
}]""",
        
        "metadata_extraction": """分析文档并提取以下元数据：
1. 文档类型（论文/报告/书籍/文章等）
2. 主题领域和子领域
3. 目标受众
4. 写作目的
5. 关键时间信息
6. 引用的主要来源

输出格式：
{
    "document_type": "",
    "domain": {"primary": "", "secondary": []},
    "target_audience": "",
    "purpose": "",
    "temporal_info": {"publication_date": "", "time_range_covered": ""},
    "key_sources": []
}"""
    }
    
    # 阶段2：宏观理解
    MACRO_UNDERSTANDING_PROMPTS = {
        "progressive_summary": {
            "level1": "用50字以内概括这份文档的核心价值和主要贡献。要求：直击要害，不要泛泛而谈。",
            
            "level2": "用200字总结文档的主要论点、关键发现和核心结论。要求：1)列出3-5个主要论点 2)说明论证方法 3)总结关键结论",
            
            "level3": """用500字详细分析文档的：
1. 论证结构（如何展开论述）
2. 关键发现（新颖性和重要性）
3. 理论贡献（对领域的推进）
4. 实践意义（应用价值）
5. 局限性（明示或暗示的）"""
        },
        
        "multidimensional_outline": """请从以下维度分析文档结构：

1. 逻辑大纲：
   - 主要章节及其逻辑关系
   - 论述的递进层次
   - 结论如何从前提推导

2. 主题大纲：
   - 核心概念及定义
   - 概念间的关系网络
   - 主题的演进脉络

3. 时间线（如适用）：
   - 事件发生顺序
   - 发展阶段划分
   - 关键时间节点

4. 因果链：
   - 主要因果关系
   - 多重因果的交互
   - 因果强度评估

输出结构化的分析结果。""",
        
        "knowledge_graph": """构建文档的知识图谱，包括：

实体识别（每类最多10个）：
- 人物：姓名、角色、贡献
- 组织：名称、类型、作用  
- 概念：术语、定义、重要性（1-5分）
- 技术/方法：名称、用途、创新点

关系抽取：
- 定义关系：A定义为B
- 包含关系：A包含B
- 因果关系：A导致B
- 对比关系：A对比B
- 引用关系：A引用B

输出图谱的节点列表和边列表，便于可视化。"""
    }
    
    # 阶段3：深度探索
    DEEP_EXPLORATION_PROMPTS = {
        "layered_questions": """基于文档内容，生成四个层次的探索性问题：

基础层（理解性问题）- 3个：
- 针对概念定义、基本事实
- 格式：[概念X]的定义是什么？在文档中如何使用？

分析层（关系性问题）- 3个：
- 针对论点间的逻辑关系
- 格式：[论点A]和[论点B]之间的逻辑关系是什么？

综合层（整合性问题）- 3个：
- 需要综合多处信息回答
- 格式：整合第X章和第Y章的观点，作者的核心立场是什么？

创新层（延伸性问题）- 3个：
- 探索新的应用和批判性思考
- 格式：基于文档论述，在[新领域Y]中如何应用这些原理？

每个问题需要包括：问题内容、提问目的、期望洞察""",
        
        "cross_reference_analysis": """执行以下交叉引用分析：

1. 概念追踪：
   - 找出所有提到'[核心概念]'的位置
   - 分析概念在不同章节的表述变化
   - 识别概念的演进或深化轨迹

2. 论点对照：
   - 比较不同章节中相关论点
   - 识别一致性和差异性
   - 标注可能的矛盾或需要澄清之处

3. 证据关联：
   - 追踪证据的使用情况
   - 分析同一证据支撑的不同论点
   - 评估证据的充分性

输出交叉引用图谱和分析报告。""",
        
        "evidence_chain_tracing": """针对文档中的核心论点进行证据链追踪：

对每个主要论点：
1. 列出所有支撑证据
   - 数据证据（统计、实验结果）
   - 案例证据（实例、案例研究）
   - 理论证据（引用、理论支撑）

2. 评估证据强度
   - 强：直接、充分、可验证
   - 中：间接、部分相关
   - 弱：推测性、轶事性

3. 识别论证缺陷
   - 逻辑跳跃
   - 证据不足
   - 过度概括

4. 提出补充建议
   - 需要什么额外证据
   - 可能的反驳论点"""
    }
    
    # 阶段4：批判性分析
    CRITICAL_ANALYSIS_PROMPTS = {
        "multi_perspective": """从以下视角批判性分析这份文档：

1. 方法论视角：
   - 研究方法的严谨性如何？
   - 样本选择是否合理充分？
   - 是否存在方法论偏见？

2. 利益相关者视角：
   - 谁会从这些观点中受益？
   - 谁的声音被边缘化或忽略？
   - 是否存在潜在的利益冲突？

3. 时代背景视角：
   - 哪些观点可能受时代局限？
   - 哪些结论可能已经过时？
   - 如何在当前背景下重新解读？

4. 跨学科视角：
   - 其他学科会如何看待这些观点？
   - 可以借鉴哪些其他领域的理论？
   - 跨学科整合的可能性？

5. 实践应用视角：
   - 理论与实践的差距有多大？
   - 实施的可行性如何？
   - 潜在的意外后果？""",
        
        "assumption_testing": """识别并检验文档中的核心假设：

1. 显性假设识别：
   - 作者明确声明的前提条件
   - 评估其合理性和普适性

2. 隐性假设挖掘：
   - 未言明但必需的前提
   - 文化、认知或学科偏见
   - 默认的价值判断

3. 假设稳健性测试：
   - 如果假设不成立会怎样？
   - 在什么条件下假设会失效？
   - 假设的边界条件是什么？

4. 敏感性分析：
   - 关键假设变化对结论的影响
   - 识别最脆弱的假设
   - 提出加强假设的建议""",
        
        "logical_gap_identification": """系统识别文档中的逻辑问题：

1. 论证结构分析：
   - 前提是否充分支撑结论
   - 是否存在隐藏的推理步骤
   - 逻辑链条的完整性

2. 常见逻辑谬误检查：
   - 诉诸权威、诉诸情感
   - 稻草人论证、滑坡谬误
   - 假两难、以偏概全

3. 因果关系审查：
   - 相关性vs因果性混淆
   - 反向因果的可能性
   - 第三变量的影响

4. 一致性检验：
   - 内部论述的一致性
   - 与已知事实的一致性
   - 与作者其他观点的一致性"""
    }
    
    # 阶段5：知识整合
    KNOWLEDGE_INTEGRATION_PROMPTS = {
        "theme_synthesis": """基于前期分析，进行主题综合：

1. 核心主题提炼：
   - 识别3-5个贯穿全文的核心主题
   - 分析主题间的相互关系
   - 构建主题层级结构

2. 观点整合：
   - 整合分散在各处的相关观点
   - 识别观点的演进脉络
   - 调和看似矛盾的观点

3. 知识体系构建：
   - 将零散知识点系统化
   - 填补知识空白
   - 构建完整的理论框架

4. 创新点总结：
   - 真正新颖的贡献
   - 对现有知识的推进
   - 开创性的视角或方法""",
        
        "knowledge_connection": """将文档知识与现有知识体系连接：

1. 领域定位：
   - 在学科知识图谱中的位置
   - 与经典理论的关系
   - 对学科范式的影响

2. 横向比较：
   - 与同时期其他研究对比
   - 不同学派观点比较
   - 互补性和竞争性分析

3. 纵向追溯：
   - 理论渊源和发展脉络
   - 继承和创新之处
   - 对后续研究的影响

4. 应用迁移：
   - 在其他领域的应用潜力
   - 方法论的普适性
   - 跨界创新的可能性""",
        
        "insight_generation": """基于整合的知识生成新洞察：

1. 模式识别：
   - 发现隐藏的规律
   - 识别反常现象
   - 提出新的分类框架

2. 关系发现：
   - 揭示未被注意的联系
   - 构建新的因果模型
   - 提出系统性解释

3. 假说生成：
   - 基于现有发现提出新假说
   - 设计验证方案
   - 预测可能的结果

4. 应用创新：
   - 新的应用场景设想
   - 解决方案优化建议
   - 实施路径规划"""
    }
    
    # 阶段6：成果输出
    OUTPUT_GENERATION_PROMPTS = {
        "executive_summary": """生成一页纸的执行摘要，包含：

1. 核心发现（3-5个要点）
   - 用一句话说明每个发现
   - 强调实践意义

2. 关键洞察（2-3个）
   - 突出创新性
   - 说明价值所在

3. 行动建议（3-5条）
   - 具体可执行
   - 标注优先级
   - 预期效果

4. 风险提示（如有）
   - 主要风险点
   - 缓解措施

格式要求：结构清晰、要点突出、语言精炼""",
        
        "detailed_report": """生成详细分析报告的大纲：

1. 执行摘要（1页）
2. 背景介绍（含文档概述）
3. 分析方法说明
4. 主要发现
   - 宏观理解结果
   - 深度探索发现
   - 批判性分析要点
5. 知识整合成果
   - 理论贡献
   - 实践启示
   - 创新洞察
6. 建议与展望
7. 附录（详细数据、图表等）""",
        
        "action_plan": """基于分析结果生成行动方案：

1. 目标设定
   - 基于文档洞察的具体目标
   - SMART原则检验

2. 策略规划
   - 总体策略方向
   - 关键成功因素

3. 实施步骤
   - 阶段划分（含时间表）
   - 具体任务分解
   - 责任分配建议

4. 资源需求
   - 人力资源
   - 技术资源
   - 预算估算

5. 风险管理
   - 风险识别与评估
   - 应对措施
   - 应急预案

6. 成效评估
   - 关键指标设定
   - 监测机制
   - 反馈调整流程"""
    }
    
    @staticmethod
    def get_prompt(category: str, name: str, **kwargs) -> str:
        """获取特定提示词"""
        prompts = getattr(AnalysisPrompts, f"{category.upper()}_PROMPTS", {})
        template = prompts.get(name, "")
        
        # 如果是嵌套字典，处理子键
        if isinstance(template, dict) and kwargs.get("level"):
            template = template.get(kwargs["level"], "")
        
        # 替换模板中的变量
        for key, value in kwargs.items():
            template = template.replace(f"[{key}]", str(value))
        
        return template
    
    @staticmethod
    def get_all_prompts(category: str) -> Dict[str, str]:
        """获取某个类别的所有提示词"""
        return getattr(AnalysisPrompts, f"{category.upper()}_PROMPTS", {})