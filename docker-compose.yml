version: '3.8'

services:
  # DPA API服务
  dpa-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dpa-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      # 数据库配置
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD}@${DB_HOST}:5432/${DB_NAME}
      REDIS_URL: redis://:${REDIS_PASSWORD}@${REDIS_HOST}:6379/0
      QDRANT_URL: http://${QDRANT_HOST}:6333
      NEO4J_URL: bolt://${NEO4J_HOST}:7687
      # AI配置
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      # 应用配置
      ENVIRONMENT: ${ENVIRONMENT:-production}
      SECRET_KEY: ${SECRET_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - dpa-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis缓存服务（本地开发用）
  redis:
    image: redis:7-alpine
    container_name: dpa-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-123qwe}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - dpa-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-123qwe}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: dpa-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./deploy/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    networks:
      - dpa-network
    depends_on:
      - dpa-api

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: dpa-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./deploy/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - dpa-network

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: dpa-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./deploy/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana-data:/var/lib/grafana
    networks:
      - dpa-network
    depends_on:
      - prometheus

volumes:
  redis-data:
  nginx-cache:
  prometheus-data:
  grafana-data:

networks:
  dpa-network:
    driver: bridge